{
  "footer.header": "Контакты",
  "buttons.goback": "Назад",
  "buttons.frontend": "Frontend",
  "buttons.backend": "Backend",
  "buttons.viewproject": "К проекту",
  "buttons.privateproject": "Закрытый",
  "info.js.header": "JavaScript",
  "info.java.header": "Java",
  "info.additional.header": "Дополнительные навыки",
  "info.languages.header": "Языки",
  "info.js.content": "JavaScript для меня — основной язык фронтенд-разработки. Использую его как в написани web-приложений с ипользованием современных фрейморков вроде React.js, так и в десктопной разработке с использованием Electron.js. Хорошо понимаю его динамическую природу, замыкания, асинхронность и особенности работы движка. Работал с нативным JS, а также с TypeScript. Регулярно использую его при создании адаптивных, интерактивных и отзывчивых интерфейсов.",
  "info.java.content": "Java — один из первых языков, с которыми я начал работать. Знаком с объектно-ориентированными принципами, системой сборки сборки Gradle и экосистемой Spring. Использую Java в разработке серверной части, построении REST API и работе с базами данных через JPA. Ценю стабильность и строгую типизацию этого языка.",
  "info.additional.content": "Обладаю уверенными навыками работы в средах разработки Visual Studio Code, IntelliJ IDEA и Visual Studio 2022. Имею опыт работы в программах 3D-моделирования SketchUp и Blender. Знаком с базовыми этапами подготовки датасетов для обучения моделей машинного обучения — работал с библиотеками NumPy, Pandas и Scikit-learn. Понимаю принципы контейнеризации в Docker. Также имею хороший опыт работы с реляционными базами данных: умею проектировать сложную архитектуру БД под конкретные задачи, в том числе с использованием PostgreSQL и соблюдением принципов нормализации и масштабируемости.",
  "info.languages.content": "Я свободно владею русским языком, поскольку он является моим родным. Английский изучаю на протяжении нескольких лет — на данный момент уровень составляет B2. Уверенно читаю техническую литературу, общаюсь на профессиональные темы и продолжаю совершенствовать разговорную практику. Изучение языков доставляет мне удовольствие, и в планах — поднять английский до уверенного уровня C1+/C2 и начать освоение ещё одного иностранного языка.",
  "table.header.technology": "Технологии",
  "table.header.knowledge": "Знания",
  "projects.frontend.printiqueApp": "PrintiqueApp — это современная веб‑платформа на React/Next.js с TypeScript и Shadcn UI, дополненная интерактивной 3D‑визуализацией товаров с помощью React‑Three‑Fiber. Вдохновлённая принципами «зелёной экономики», система печати по требованию минимизирует отходы. Модель «длинного хвоста» позволяет предложить клиентам широкий ассортимент уникальных продуктов — аналогичный подходу Amazon для нишевых рынков. UI выполнен через гибкие и настраиваемые компоненты Shadcn UI. 3D‑визуализация реализована на React‑Three‑Fiber, позволяющем декларативно создавать сцену и объекты, оптимально взаимодействующие с React‑экосистемой. Благодаря этому пользователи могут визуально взаимодействовать с моделями товаров перед покупкой. Заложена архитектура для масштабирования, адаптивности и бесшовной интеграции API печати и доставки. Deployment выполнен на Vercel, при полной автоматизации CI/CD.",
  "projects.frontend.telephonyApp": "Telephony — мощное кроссплатформенное десктоп‑приложение на Electron.js, построенное с использованием React, DevExtreme React и Material UI. Структура приложения оптимизирована с помощью Redux Toolkit (RTK) для надёжного управления состоянием, а взаимодействие с удалёнными машинами реализовано через WebSocket‑соединения, обеспечивающие мгновенный обмен командами и данными. Встроенный VNC‑клиент позволяет операторам безопасно управлять чужими рабочими столами в реальном времени, а модуль аудио‑ и видеокоммуникаций поддерживает удалённый набор абонентов в Skype, Telegram и MicroSIP, предлагая запись разговоров, живой мониторинг, трансляцию голоса оператора и хранение аудио‑видео архивов. Система логирования фиксирует детальные данные о каждом звонке, предоставляя гибкие отчёты и дашборды со статистикой по операторам, каналам связи и продолжительности сессий. Безопасность гарантируется аутентификацией через JWT: после логина все последующие запросы проходят верификацию токеном. Администрирование реализовано через ролевую модель доступа: можно создавать произвольные роли, настраивать для них разрешения на уровне функциональных блоков и ресурсов, а также регистрировать новых пользователей в соответствии с корпоративными политиками. Telephony сочетает в себе высокую производительность, масштабируемость и безопасность, предоставляя операторам единый удобный интерфейс для полного контроля над сетью удалённых машин.",
  "projects.backend.telephonyDemoApi": "Telephony Demo API — легковесный backend-сервис, реализованный на Next.js (API Routes) и развёрнутый на Vercel специально для демонстрационной версии клиента. Этот сервер предназначен для визуального представления возможностей системы и обрабатывает базовые сценарии аутентификации и работы с данными. Аутентификация реализована через логин и пароль с выдачей JWT‑токена, который используется для валидации всех последующих запросов. Это обеспечивает простой, но надёжный механизм защиты и имитирует поведение полноценного корпоративного API. Доступ к базе данных организован с помощью Prisma ORM, что позволяет эффективно взаимодействовать с хранимыми данными и поддерживать чистую и типобезопасную структуру модели. API покрывает основные операции: вход, получение пользовательских данных и доступ к демонстрационным сущностям, отражающим реальную логику системы. Сервис ориентирован на простоту, скорость отклика и стабильную работу в демонстрационных условиях, предоставляя изолированную среду для тестирования и презентации интерфейса без привязки к боевому окружению.",
  "projects.backend.telephonyServer": "Telephony (Backend) — серверная часть приложения, реализованная на Java с использованием Spring Boot 3, Spring Web, Spring Data JPA и PostgreSQL. Она обеспечивает обработку запросов от фронтенда, управляет бизнес-логикой и взаимодействует с базой данных. Для построения типобезопасных и динамических SQL-запросов используется QueryDSL, а версионирование и автоматизация миграций БД реализованы с помощью Liquibase. Система аутентификации основана на JWT, что позволяет безопасно управлять сессиями: после логина все API-запросы проходят через верификацию токенов. Реализована гибкая ролевая модель доступа — сервер обрабатывает создание ролей, назначение прав и регистрацию пользователей с учётом их разрешений. Backend также отвечает за логирование действий пользователей, хранение записей сессий, работу со статистикой и агрегацию данных для дашбордов. Код организован в виде REST-контроллеров, сервисов и репозиториев, что обеспечивает прозрачную архитектуру и упрощает поддержку проекта. Серверная часть работает стабильно под нагрузкой и обеспечивает надёжную основу для всех функций клиентского приложения.",
  "projects.backend.telephonyRemoteTerminal": "Telephony Service — кроссплатформенный сервисный компонент, устанавливаемый на удалённые терминалы и разработанный на C# с использованием .NET 8. Сервис обеспечивает полный контроль над пользовательскими приложениями (MicroSIP, Skype, Telegram) и осуществляет двустороннюю коммуникацию с клиентским приложением через WebSocket‑соединение, реализованное с помощью библиотеки Fleck. Функциональность сервиса включает в себя управление пользовательским интерфейсом сторонних приложений через FlaUI, захват и трансляцию аудио с использованием NAudio: сервис передаёт оператору поток звука с терминала и принимает голос оператора для дальнейшей передачи абоненту. Дополнительно реализованы видеозапись и аудиозапись с экрана и микрофона с помощью ScreenRecorderLib, с возможностью последующей передачи и хранения этих данных. Встроенная система распознавания речи на базе библиотеки Vosk работает в режиме реального времени, транскрибируя речь абонента и периодически отправляя расшифрованные фрагменты оператору для отображения и дальнейшего сохранения в БД. Сервис обеспечивает стабильную работу в условиях реального времени, минимальные задержки при передаче данных и надёжное взаимодействие с клиентским приложением, формируя технологическую основу для удалённого контроля и коммуникации."
}
