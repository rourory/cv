export const enUS = {
  "footer.header": "Contact me",
  "buttons.goback": "Go back",
  "buttons.frontend": "Frontend",
  "buttons.backend": "Backend",
  "buttons.viewproject": "View Project",
  "buttons.privateproject": "Private",
  "info.js.header": "JavaScript",
  "info.java.header": "Java",
  "info.additional.header": "Extra Skills",
  "info.languages.header": "Languages",
  "info.js.content":
    "JavaScript is the main language of frontend development for me. I use it both in writing web applications using modern frameworks like React.js, and in desktop development using Electron.js I understand well its dynamic nature, closures, asynchrony, and engine operation features. I've worked with native JS, as well as TypeScript. I regularly use it to create responsive, interactive, and responsive interfaces.",
  "info.java.content":
    "Java is one of the first languages I started working with. I am familiar with object-oriented principles, the Gradle build system, and the Spring ecosystem. I use Java in developing the backend, building a REST API, and working with databases through JPA. I appreciate the stability and strict typing of this language.",
  "info.additional.content":
    "I have strong skills working in the Visual Studio Code, IntelliJ IDEA, and Visual Studio 2022 development environments. I have experience working in 3D modeling programs SketchUp and Blender. I am familiar with the basic stages of preparing datasets for training machine learning models — I have worked with the NumPy, Pandas and Scikit-learn libraries. I understand the principles of containerization in Docker. I also have good experience working with relational databases: I am able to design complex database architecture for specific tasks, including using PostgreSQL and observing the principles of normalization and scalability.",
  "info.languages.content":
    "I am fluent in Russian, as it is my native language. I have been studying English for several years — at the moment the level is B2. I confidently read technical literature, communicate on professional topics, and continue to improve my conversational practice. I enjoy learning languages, and I plan to raise English to a confident C1+/C2 level and start learning another foreign language, for example, german.",
  "table.header.technology": "Technology",
  "table.header.knowledge": "Knowledge",
  "projects.frontend.printiqueApp":
    'PrintiqueApp is a modern web platform based on React/Next.js with TypeScript and Shadcn UI, complemented by interactive 3D visualization of products using React‑Three‑Fiber. Inspired by the principles of the "green economy", the on-demand printing system minimizes waste. The long—tail model allows us to offer customers a wide range of unique products, similar to Amazon\'s approach for niche markets. The UI is implemented through flexible and customizable ShadCN components. 3D visualization is implemented on React‑Three‑Fiber, which allows declaratively creating a scene and objects that optimally interact with the React ecosystem. This allows users to visually interact with product models before making a purchase. The architecture is laid out for scaling, adaptability, and seamless integration of the printing and delivery APIs. The deployment is performed on Vercel, with full CI/CD automation.',
  "projects.frontend.telephonyApp":
    "Telephony is a powerful cross‑platform desktop application for Electron.js built using React, DevExtreme React, and Material UI. The application structure is optimized using the Redux Toolkit (RTK) for reliable state management, and interaction with remote machines is implemented through WebSocket connections that provide instant command and data exchange. The built‑in VNC client allows operators to securely manage other people's desktops in real time, and the audio and video communications module supports remote dialing to Skype, Telegram, and MicroSIP, offering conversation recording, live monitoring, operator voice transmission, and audio and video archive storage. The logging system captures detailed data about each call, providing flexible reports and dashboards with statistics on operators, communication channels, and session duration. Security is guaranteed by authentication via JWT: after login, all subsequent requests are verified with a token. Administration is implemented through a role-based access model: you can create arbitrary roles, configure permissions for them at the level of functional blocks and resources, and register new users in accordance with corporate policies. Telephony combines high performance, scalability and security, providing operators with a single user-friendly interface for full control over a network of remote machines.",
  "projects.backend.telephonyDemoApi":
    "The Telephony Demo API is a lightweight backend service implemented on Next.js (API Routes) and deployed on Vercel specifically for the demo version of the client. This server is designed to visually represent the capabilities of the system and handles basic authentication and data manipulation scenarios. Authentication is implemented through a username and password with the issuance of a JWT token, which is used to validate all subsequent requests. This provides a simple but reliable protection mechanism and mimics the behavior of a full-fledged enterprise API. Access to the database is organized using Prisma ORM, which allows you to effectively interact with stored data and maintain a clean and type-safe model structure. The API covers the basic operations: logging in, receiving user data, and accessing demo entities that reflect the real logic of the system. The service is focused on simplicity, response speed and stable operation in demo conditions, providing an isolated environment for testing and presentation of the interface without reference to the combat environment.",
  "projects.backend.telephonyServer":
    "Telephony Server is the server part of the application implemented in Java using Spring Boot 3, Spring Web, Spring Data JPA and PostgreSQL. It handles requests from the front-end, manages business logic, and interacts with the database. QueryDSL is used to build type-safe and dynamic SQL queries, and versioning and automation of database migrations are implemented using Liquibase. The authentication system is based on JWT, which allows secure session management: after login, all API requests go through token verification. A flexible role—based access model has been implemented - the server handles role creation, rights assignment, and user registration based on their permissions. The backend is also responsible for logging user actions, storing session records, working with statistics, and aggregating data for dashboards. The code is organized in the form of REST controllers, services, and repositories, which provides a transparent architecture and simplifies project support. The server side works stably under load and provides a reliable foundation for all functions of the client application.",
  "projects.backend.telephonyRemoteTerminal":
    "Telephony Service is a cross—platform service component installed on remote terminals and developed in C# using .NET 8. The service provides full control over user applications (MicroSIP, Skype, Telegram) and performs two‑way communication with the client application via a WebSocket connection implemented using the Fleck library. The functionality of the service includes managing the user interface of third-party applications via FlaUI, capturing and broadcasting audio using NAudio: the service transmits the audio stream from the terminal to the operator and receives the operator's voice for further transmission to the subscriber. Additionally, video and audio recording from the screen and microphone are implemented using ScreenRecorderLib, with the possibility of subsequent transmission and storage of this data. The built-in speech recognition system based on the Vosk library works in real time, transcribing the subscriber's speech and periodically sending the decrypted fragments to the operator for display and further storage in the database. The service provides stable real-time operation, minimal delays in data transmission and reliable interaction with the client application, forming the technological basis for remote monitoring and communication.",
};
