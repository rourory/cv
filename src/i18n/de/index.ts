import type { BaseTranslation } from "../i18n-types";

const de = {
  footerHeader: "Kontakte",
  buttonsGoBack: "Zurück",
  buttonsFrontend: "Frontend",
  buttonsBackend: "Backend",
  buttonsViewProject: "Zum Projekt",
  buttonsPrivateProject: "Privat",
  infoJsHeader: "JavaScript",
  infoJavaHeader: "Java",
  infoAdditionalHeader: "Zusätzliche Fähigkeiten",
  infoLanguagesHeader: "Sprachen",
  infoJsContent:
    "JavaScript ist für mich die Hauptsprache der Frontend-Entwicklung. Ich nutze es sowohl für die Erstellung von Webanwendungen mit modernen Frameworks wie React.js als auch für Desktop-Entwicklung mit Electron.js. Ich verstehe gut seine dynamische Natur, Closures, Asynchronität und die Besonderheiten der Engine. Ich habe mit nativem JS sowie mit TypeScript gearbeitet und setze es regelmäßig für die Erstellung adaptiver, interaktiver und reaktionsschneller Benutzeroberflächen ein.",
  infoJavaContent:
    "Java war eine der ersten Sprachen, mit denen ich gearbeitet habe. Ich bin mit objektorientierten Prinzipien, dem Build-Tool Gradle und dem Spring-Ökosystem vertraut. Ich verwende Java für die Backend-Entwicklung, den Aufbau von REST-APIs und die Arbeit mit Datenbanken über JPA. Ich schätze die Stabilität und strenge Typisierung dieser Sprache.",
  infoAdditionalContent:
    "Ich verfüge über solide Kenntnisse in den Entwicklungsumgebungen Visual Studio Code, IntelliJ IDEA und Visual Studio 2022. Ich habe Erfahrung mit 3D-Modellierungsprogrammen wie SketchUp und Blender. Ich kenne die grundlegenden Schritte der Vorbereitung von Datensätzen für das Training von Machine-Learning-Modellen und habe mit Bibliotheken wie NumPy, Pandas und Scikit-learn gearbeitet. Ich verstehe die Prinzipien der Containerisierung mit Docker. Außerdem habe ich gute Erfahrung mit relationalen Datenbanken: Ich kann komplexe Datenbankarchitekturen für spezifische Anforderungen entwerfen, einschließlich der Nutzung von PostgreSQL und unter Einhaltung von Normalisierungs- und Skalierbarkeitsprinzipien.",
  infoLanguagesContent:
    "Ich spreche fließend Russisch, da es meine Muttersprache ist. Englisch lerne ich seit mehreren Jahren – derzeit auf B2-Niveau. Ich lese technische Literatur sicher, kommuniziere zu fachlichen Themen und arbeite weiter an meiner mündlichen Praxis. Das Erlernen von Sprachen macht mir Spaß, und ich plane, mein Englisch auf ein sicheres C1+/C2-Niveau zu bringen und eine weitere Fremdsprache zu erlernen.",
  tableHeaderTechnology: "Technologien",
  tableHeaderKnowledge: "Kenntnisse",
  projectsFrontendPrintiqueApp:
    "PrintiqueApp ist eine moderne Webplattform auf Basis von React/Next.js mit TypeScript und Shadcn UI, ergänzt durch interaktive 3D-Visualisierung von Produkten mittels React‑Three‑Fiber. Inspiriert von den Prinzipien der „grünen Wirtschaft“ minimiert das Print-on-Demand-System Abfall. Das Long-Tail-Modell bietet Kunden eine breite Auswahl einzigartiger Produkte – ähnlich dem Ansatz von Amazon für Nischenmärkte. Die UI basiert auf flexiblen, anpassbaren Shadcn UI-Komponenten. Die 3D-Visualisierung realisiert React‑Three‑Fiber, das deklarativ Szenen und Objekte erstellt und optimal mit dem React-Ökosystem zusammenarbeitet. Dadurch können Nutzer Modelle vor dem Kauf visuell erkunden. Die Architektur ist auf Skalierbarkeit, Responsivität und nahtlose API-Integration für Druck- und Versanddienste ausgelegt. Die Bereitstellung erfolgt automatisiert über CI/CD auf Vercel.",
  projectsFrontendTelephonyApp:
    "Telephony ist eine leistungsstarke, plattformübergreifende Desktop-Anwendung auf Electron.js-Basis, entwickelt mit React, DevExtreme React und Material UI. Die App-Struktur ist mit Redux Toolkit (RTK) für zuverlässiges State-Management optimiert, und die Kommunikation mit entfernten Maschinen erfolgt über WebSocket-Verbindungen für Echtzeit-Datenaustausch. Ein integrierter VNC-Client ermöglicht sicheren Remote-Zugriff auf Desktops, während das Audio‑/Video-Modul Anrufe über Skype, Telegram und MicroSIP unterstützt, inklusive Gesprächsaufzeichnung, Live-Monitoring, Audio-Streaming und Archivierung. Die Logging-Funktion erfasst detaillierte Daten zu jedem Anruf und bietet flexible Berichte und Dashboards zu Operatoren, Kommunikationskanälen und Sitzungsdauer. Sicherheit wird durch JWT-Authentifizierung gewährleistet: Nach dem Login werden alle Folgeanfragen per Token verifiziert. Die Administration erfolgt über ein Rollenmodell, das beliebige Rollen und Berechtigungen auf Funktions- und Ressourcenebene erlaubt und die Registrierung neuer Nutzer gemäß Unternehmensrichtlinien unterstützt. Telephony vereint hohe Performance, Skalierbarkeit und Sicherheit in einer einheitlichen Oberfläche für die vollständige Kontrolle über entfernte Netzwerke.",
  projectsBackendTelephonyDemoApi:
    "Telephony Demo API ist ein leichtgewichtiger Backend-Service, implementiert mit Next.js (API Routes) und bereitgestellt auf Vercel, speziell für die Demoversion des Clients. Der Server zeigt die Systemfunktionen visuell und verarbeitet grundlegende Szenarien der Authentifizierung und Datenverarbeitung. Die Authentifizierung erfolgt über Login/Passwort mit JWT-Tokens für die Validierung aller Folgeanfragen. Dies bietet einen einfachen, aber sicheren Schutzmechanismus und imitiert das Verhalten eines vollständigen Unternehmens-APIs. Der Datenbankzugriff wird mit Prisma ORM organisiert, was eine effiziente Dateninteraktion und typsichere Modellstruktur gewährleistet. Die API deckt Hauptoperationen ab: Login, Abruf von Benutzerdaten und Zugriff auf Demo-Entitäten, die die reale Systemlogik abbilden. Der Service ist auf Einfachheit, schnelle Reaktionszeiten und stabile Performance in Demo-Umgebungen ausgelegt und bietet eine isolierte Test- und Präsentationsumgebung ohne Produktionsbindung.",
  projectsBackendTelephonyServer:
    "Telephony (Backend) ist der Serverteil der Anwendung, realisiert in Java mit Spring Boot 3, Spring Web, Spring Data JPA und PostgreSQL. Er verarbeitet Anfragen vom Frontend, steuert die Geschäftslogik und interagiert mit der Datenbank. Für typsichere, dynamische SQL-Abfragen wird QueryDSL eingesetzt, und Datenbankmigrationen werden mit Liquibase versioniert und automatisiert. Die Authentifizierung basiert auf JWT, wodurch Sitzungen sicher verwaltet werden: Nach dem Login werden alle API-Anfragen per Token verifiziert. Ein flexibles Rollenmodell ermöglicht die Erstellung von Rollen, Zuweisung von Rechten und Benutzerregistrierung entsprechend den Berechtigungen. Das Backend ist in REST-Controller, Services und Repositories strukturiert, was eine transparente Architektur und einfache Wartung sicherstellt. Der Server arbeitet stabil unter Last und bildet die zuverlässige Grundlage für alle Client-Funktionen.",
  projectsBackendTelephonyRemoteTerminal:
    "Telephony Service ist eine plattformübergreifende Service-Komponente, die auf entfernten Terminals installiert wird und in C# mit .NET 8 entwickelt ist. Der Dienst ermöglicht vollständige Kontrolle über Nutzeranwendungen (MicroSIP, Skype, Telegram) und realisiert bidirektionale Kommunikation mit dem Client über WebSocket, implementiert mit der Fleck-Bibliothek. Zu den Funktionen gehören UI-Automatisierung externer Anwendungen via FlaUI, Audio-Streaming und -Erfassung mit NAudio: Der Dienst sendet den Ton vom Terminal und empfängt Operator-Audio zur Weiterleitung an den Anrufer. Zudem werden Bildschirm- und Mikrofonaufnahmen mit ScreenRecorderLib erstellt und gespeichert. Eine Echtzeit-Spracherkennung mit Vosk transkribiert Nutzerreden und sendet periodisch Textfragmente an den Operator und die Datenbank. Der Service gewährleistet stabile Echtzeit-Performance, minimale Latenz und zuverlässige Interaktion mit dem Client und bildet die technologische Basis für Remote-Kontrolle und Kommunikation.",
} satisfies BaseTranslation;

export default de;
