import type { BaseTranslation } from "../i18n-types";

const pl = {
  footerHeader: "Kontakt",
  buttonsGoBack: "Wstecz",
  buttonsFrontend: "Frontend",
  buttonsBackend: "Backend",
  buttonsViewProject: "Zobacz projekt",
  buttonsPrivateProject: "Prywatny",
  infoJsHeader: "JavaScript",
  infoJavaHeader: "Java",
  infoAdditionalHeader: "Dodatkowe umiejętności",
  infoLanguagesHeader: "Języki",
  infoJsContent:
    "JavaScript jest dla mnie głównym językiem frontendowym. Używam go zarówno do tworzenia aplikacji webowych z wykorzystaniem nowoczesnych frameworków takich jak React.js, jak i do tworzenia aplikacji desktopowych w Electron.js. Dobrze rozumiem jego dynamiczną naturę, zamknięcia, asynchroniczność i specyfikę działania silnika. Pracowałem z natywnym JS oraz z TypeScript i regularnie wykorzystuję go do tworzenia responsywnych, interaktywnych i adaptacyjnych interfejsów.",
  infoJavaContent:
    "Java to jeden z pierwszych języków, z którymi zacząłem pracować. Znam zasady programowania obiektowego, system budowania Gradle oraz ekosystem Spring. Używam Javy do tworzenia backendu, budowania REST API i pracy z bazami danych przez JPA. Cenię stabilność i silne typowanie tego języka.",
  infoAdditionalContent:
    "Posiadam pewne umiejętności pracy w środowiskach Visual Studio Code, IntelliJ IDEA i Visual Studio 2022. Mam doświadczenie z programami do modelowania 3D, takimi jak SketchUp i Blender. Znam podstawowe etapy przygotowania zestawów danych do trenowania modeli uczenia maszynowego — pracowałem z bibliotekami NumPy, Pandas i Scikit-learn. Rozumiem zasady konteneryzacji w Dockerze. Mam także duże doświadczenie z relacyjnymi bazami danych: potrafię projektować złożone architektury dla konkretnych zadań, w tym z użyciem PostgreSQL, z zachowaniem zasad normalizacji i skalowalności.",
  infoLanguagesContent:
    "Posługuję się biegle językiem rosyjskim, ponieważ jest on moim językiem ojczystym. Angielskiego uczę się od kilku lat — obecnie na poziomie B2. Czytam literaturę techniczną, komunikuję się w tematach zawodowych i dalej rozwijam praktykę konwersacji. Nauka języków sprawia mi przyjemność, a w planach mam podniesienie angielskiego do poziomu C1+/C2 oraz rozpoczęcie nauki kolejnego języka obcego.",
  tableHeaderTechnology: "Technologie",
  tableHeaderKnowledge: "Wiedza",
  projectsFrontendPrintiqueApp:
    "PrintiqueApp to nowoczesna platforma webowa oparta na React/Next.js z TypeScript i Shadcn UI, wzbogacona interaktywną wizualizacją 3D produktów za pomocą React-Three-Fiber. Inspirowana zasadami „zielonej gospodarki”, usługa druku na żądanie minimalizuje odpady. Model długiego ogona umożliwia zaoferowanie klientom szerokiego asortymentu unikalnych produktów — podobnie jak Amazon na rynkach niszowych. UI zbudowano z elastycznych i konfigurowalnych komponentów Shadcn UI. Wizualizacja 3D realizowana jest w React-Three-Fiber, który umożliwia deklaratywne tworzenie scen i obiektów, optymalnie współpracujących z ekosystemem React. Dzięki temu użytkownicy mogą wizualnie przeglądać modele produktów przed zakupem. Architektura przewiduje skalowalność, responsywność i bezproblemową integrację z API druku i dostawy. Deployment odbywa się na Vercel z pełną automatyzacją CI/CD.",
  projectsFrontendTelephonyApp:
    "Telephony to wydajna, wieloplatformowa aplikacja desktopowa oparta na Electron.js, stworzona z wykorzystaniem React, DevExtreme React i Material UI. Struktura aplikacji jest zoptymalizowana za pomocą Redux Toolkit (RTK) dla niezawodnego zarządzania stanem, a komunikacja z zdalnymi maszynami odbywa się przez połączenia WebSocket, które zapewniają natychmiastową wymianę poleceń i danych. Wbudowany klient VNC umożliwia operatorom bezpieczne zarządzanie zdalnymi pulpitami w czasie rzeczywistym, a moduł audio-wideo obsługuje połączenia w Skype, Telegram i MicroSIP, oferując nagrywanie rozmów, monitorowanie na żywo, transmisję głosu operatora i przechowywanie archiwów audio-wideo. System logowania rejestruje szczegółowe dane każdego połączenia, dostarczając elastyczne raporty i pulpity statystyk dotyczące operatorów, kanałów komunikacji i czasu trwania sesji. Bezpieczeństwo zapewnia uwierzytelnianie JWT: po zalogowaniu wszystkie kolejne żądania są weryfikowane tokenem. Administracja realizowana jest przez model ról: można tworzyć dowolne role, konfigurować uprawnienia na poziomie funkcji i zasobów oraz rejestrować nowych użytkowników zgodnie z politykami firmy. Telephony łączy wysoką wydajność, skalowalność i bezpieczeństwo, oferując operatorom jednolity interfejs do pełnej kontroli nad siecią zdalnych maszyn.",
  projectsBackendTelephonyDemoApi:
    "Telephony Demo API to lekka usługa backendowa zaimplementowana w Next.js (API Routes) i wdrożona na Vercel, stworzona specjalnie dla wersji demonstracyjnej klienta. Serwer służy wizualnej prezentacji możliwości systemu i obsługuje podstawowe scenariusze uwierzytelniania oraz pracy z danymi. Uwierzytelnianie odbywa się przez login i hasło z wydawaniem tokenów JWT, które służą do walidacji wszystkich kolejnych żądań. Zapewnia to prosty, ale niezawodny mechanizm zabezpieczeń i imituje działanie pełnoprawnego korporacyjnego API. Dostęp do bazy danych organizowany jest przez Prisma ORM, co pozwala efektywnie zarządzać danymi i utrzymywać czystą, typowaną strukturę modelu. API obsługuje główne operacje: logowanie, pobieranie danych użytkownika i dostęp do encji demonstracyjnych odzwierciedlających rzeczywistą logikę systemu. Usługa koncentruje się na prostocie, szybkiej reakcji i stabilności w warunkach demonstracyjnych, oferując izolowane środowisko do testowania i prezentacji bez zależności od produkcji.",
  projectsBackendTelephonyServer:
    "Telephony (Backend) to część serwerowa aplikacji napisana w Javie z użyciem Spring Boot 3, Spring Web, Spring Data JPA i PostgreSQL. Zapewnia obsługę żądań od frontendu, zarządza logiką biznesową i współpracuje z bazą danych. Do tworzenia dynamicznych, typowanych zapytań SQL wykorzystuje się QueryDSL, a wersjonowanie i automatyzację migracji bazy danych realizuje Liquibase. Uwierzytelnianie opiera się na JWT, co pozwala bezpiecznie zarządzać sesjami: po zalogowaniu wszystkie żądania API są weryfikowane tokenem. Wdrożono elastyczny model ról — serwer obsługuje tworzenie ról, przypisywanie uprawnień i rejestrację użytkowników zgodnie z ich uprawnieniami. Backend podzielony jest na kontrolery REST, serwisy i repozytoria, co zapewnia przejrzystą architekturę i ułatwia utrzymanie. Serwer działa stabilnie pod obciążeniem i tworzy solidną podstawę dla wszystkich funkcji aplikacji klienckiej.",
  projectsBackendTelephonyRemoteTerminal:
    "Telephony Service to wieloplatformowy komponent serwisowy instalowany na zdalnych terminalach, opracowany w C# z .NET 8. Usługa zapewnia pełną kontrolę nad aplikacjami użytkownika (MicroSIP, Skype, Telegram) i realizuje dwukierunkową komunikację z aplikacją kliencką przez WebSocket, implementowany za pomocą biblioteki Fleck. Funkcjonalność obejmuje automatyzację UI za pomocą FlaUI, przechwytywanie i transmisję audio z wykorzystaniem NAudio — usługa przesyła strumień dźwięku z terminala i odbiera głos operatora do dalszej dystrybucji. Dodatkowo realizuje nagrywanie wideo i audio ekranu oraz mikrofonu przy użyciu ScreenRecorderLib, z możliwością przesyłania i przechowywania tych danych. Wbudowany system rozpoznawania mowy oparty na Vosk działa w czasie rzeczywistym, transkrybując głos użytkownika i okresowo wysyłając fragmenty tekstu do operatora oraz zapisując je w bazie danych. Usługa gwarantuje stabilne działanie w czasie rzeczywistym, minimalne opóźnienia w transmisji i niezawodną interakcję z klientem, tworząc technologiczną podstawę dla zdalnej kontroli i komunikacji.",
} satisfies BaseTranslation;

export default pl;
