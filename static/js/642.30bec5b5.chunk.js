"use strict";(self.webpackChunkcv=self.webpackChunkcv||[]).push([[642],{642:(e,n,i)=>{i.r(n),i.d(n,{default:()=>t});const t={footerHeader:"Kontakte",buttonsGoBack:"Zur\xfcck",buttonsFrontend:"Frontend",buttonsBackend:"Backend",buttonsViewProject:"Zum Projekt",buttonsPrivateProject:"Privat",infoJsHeader:"JavaScript",infoJavaHeader:"Java",infoAdditionalHeader:"Zus\xe4tzliche F\xe4higkeiten",infoLanguagesHeader:"Sprachen",infoJsContent:"JavaScript ist f\xfcr mich die Hauptsprache der Frontend-Entwicklung. Ich nutze es sowohl f\xfcr die Erstellung von Webanwendungen mit modernen Frameworks wie React.js als auch f\xfcr Desktop-Entwicklung mit Electron.js. Ich verstehe gut seine dynamische Natur, Closures, Asynchronit\xe4t und die Besonderheiten der Engine. Ich habe mit nativem JS sowie mit TypeScript gearbeitet und setze es regelm\xe4\xdfig f\xfcr die Erstellung adaptiver, interaktiver und reaktionsschneller Benutzeroberfl\xe4chen ein.",infoJavaContent:"Java war eine der ersten Sprachen, mit denen ich gearbeitet habe. Ich bin mit objektorientierten Prinzipien, dem Build-Tool Gradle und dem Spring-\xd6kosystem vertraut. Ich verwende Java f\xfcr die Backend-Entwicklung, den Aufbau von REST-APIs und die Arbeit mit Datenbanken \xfcber JPA. Ich sch\xe4tze die Stabilit\xe4t und strenge Typisierung dieser Sprache.",infoAdditionalContent:"Ich verf\xfcge \xfcber solide Kenntnisse in den Entwicklungsumgebungen Visual Studio Code, IntelliJ IDEA und Visual Studio 2022. Ich habe Erfahrung mit 3D-Modellierungsprogrammen wie SketchUp und Blender. Ich kenne die grundlegenden Schritte der Vorbereitung von Datens\xe4tzen f\xfcr das Training von Machine-Learning-Modellen und habe mit Bibliotheken wie NumPy, Pandas und Scikit-learn gearbeitet. Ich verstehe die Prinzipien der Containerisierung mit Docker. Au\xdferdem habe ich gute Erfahrung mit relationalen Datenbanken: Ich kann komplexe Datenbankarchitekturen f\xfcr spezifische Anforderungen entwerfen, einschlie\xdflich der Nutzung von PostgreSQL und unter Einhaltung von Normalisierungs- und Skalierbarkeitsprinzipien.",infoLanguagesContent:"Ich spreche flie\xdfend Russisch, da es meine Muttersprache ist. Englisch lerne ich seit mehreren Jahren \u2013 derzeit auf B2-Niveau. Ich lese technische Literatur sicher, kommuniziere zu fachlichen Themen und arbeite weiter an meiner m\xfcndlichen Praxis. Das Erlernen von Sprachen macht mir Spa\xdf, und ich plane, mein Englisch auf ein sicheres C1+/C2-Niveau zu bringen und eine weitere Fremdsprache zu erlernen.",tableHeaderTechnology:"Technologien",tableHeaderKnowledge:"Kenntnisse",projectsFrontendPrintiqueApp:"PrintiqueApp ist eine moderne Webplattform auf Basis von React/Next.js mit TypeScript und Shadcn UI, erg\xe4nzt durch interaktive 3D-Visualisierung von Produkten mittels React\u2011Three\u2011Fiber. Inspiriert von den Prinzipien der \u201egr\xfcnen Wirtschaft\u201c minimiert das Print-on-Demand-System Abfall. Das Long-Tail-Modell bietet Kunden eine breite Auswahl einzigartiger Produkte \u2013 \xe4hnlich dem Ansatz von Amazon f\xfcr Nischenm\xe4rkte. Die UI basiert auf flexiblen, anpassbaren Shadcn UI-Komponenten. Die 3D-Visualisierung realisiert React\u2011Three\u2011Fiber, das deklarativ Szenen und Objekte erstellt und optimal mit dem React-\xd6kosystem zusammenarbeitet. Dadurch k\xf6nnen Nutzer Modelle vor dem Kauf visuell erkunden. Die Architektur ist auf Skalierbarkeit, Responsivit\xe4t und nahtlose API-Integration f\xfcr Druck- und Versanddienste ausgelegt. Die Bereitstellung erfolgt automatisiert \xfcber CI/CD auf Vercel.",projectsFrontendTelephonyApp:"Telephony ist eine leistungsstarke, plattform\xfcbergreifende Desktop-Anwendung auf Electron.js-Basis, entwickelt mit React, DevExtreme React und Material UI. Die App-Struktur ist mit Redux Toolkit (RTK) f\xfcr zuverl\xe4ssiges State-Management optimiert, und die Kommunikation mit entfernten Maschinen erfolgt \xfcber WebSocket-Verbindungen f\xfcr Echtzeit-Datenaustausch. Ein integrierter VNC-Client erm\xf6glicht sicheren Remote-Zugriff auf Desktops, w\xe4hrend das Audio\u2011/Video-Modul Anrufe \xfcber Skype, Telegram und MicroSIP unterst\xfctzt, inklusive Gespr\xe4chsaufzeichnung, Live-Monitoring, Audio-Streaming und Archivierung. Die Logging-Funktion erfasst detaillierte Daten zu jedem Anruf und bietet flexible Berichte und Dashboards zu Operatoren, Kommunikationskan\xe4len und Sitzungsdauer. Sicherheit wird durch JWT-Authentifizierung gew\xe4hrleistet: Nach dem Login werden alle Folgeanfragen per Token verifiziert. Die Administration erfolgt \xfcber ein Rollenmodell, das beliebige Rollen und Berechtigungen auf Funktions- und Ressourcenebene erlaubt und die Registrierung neuer Nutzer gem\xe4\xdf Unternehmensrichtlinien unterst\xfctzt. Telephony vereint hohe Performance, Skalierbarkeit und Sicherheit in einer einheitlichen Oberfl\xe4che f\xfcr die vollst\xe4ndige Kontrolle \xfcber entfernte Netzwerke.",projectsBackendTelephonyDemoApi:"Telephony Demo API ist ein leichtgewichtiger Backend-Service, implementiert mit Next.js (API Routes) und bereitgestellt auf Vercel, speziell f\xfcr die Demoversion des Clients. Der Server zeigt die Systemfunktionen visuell und verarbeitet grundlegende Szenarien der Authentifizierung und Datenverarbeitung. Die Authentifizierung erfolgt \xfcber Login/Passwort mit JWT-Tokens f\xfcr die Validierung aller Folgeanfragen. Dies bietet einen einfachen, aber sicheren Schutzmechanismus und imitiert das Verhalten eines vollst\xe4ndigen Unternehmens-APIs. Der Datenbankzugriff wird mit Prisma ORM organisiert, was eine effiziente Dateninteraktion und typsichere Modellstruktur gew\xe4hrleistet. Die API deckt Hauptoperationen ab: Login, Abruf von Benutzerdaten und Zugriff auf Demo-Entit\xe4ten, die die reale Systemlogik abbilden. Der Service ist auf Einfachheit, schnelle Reaktionszeiten und stabile Performance in Demo-Umgebungen ausgelegt und bietet eine isolierte Test- und Pr\xe4sentationsumgebung ohne Produktionsbindung.",projectsBackendTelephonyServer:"Telephony (Backend) ist der Serverteil der Anwendung, realisiert in Java mit Spring Boot\xa03, Spring Web, Spring Data JPA und PostgreSQL. Er verarbeitet Anfragen vom Frontend, steuert die Gesch\xe4ftslogik und interagiert mit der Datenbank. F\xfcr typsichere, dynamische SQL-Abfragen wird QueryDSL eingesetzt, und Datenbankmigrationen werden mit Liquibase versioniert und automatisiert. Die Authentifizierung basiert auf JWT, wodurch Sitzungen sicher verwaltet werden: Nach dem Login werden alle API-Anfragen per Token verifiziert. Ein flexibles Rollenmodell erm\xf6glicht die Erstellung von Rollen, Zuweisung von Rechten und Benutzerregistrierung entsprechend den Berechtigungen. Das Backend ist in REST-Controller, Services und Repositories strukturiert, was eine transparente Architektur und einfache Wartung sicherstellt. Der Server arbeitet stabil unter Last und bildet die zuverl\xe4ssige Grundlage f\xfcr alle Client-Funktionen.",projectsBackendTelephonyRemoteTerminal:"Telephony Service ist eine plattform\xfcbergreifende Service-Komponente, die auf entfernten Terminals installiert wird und in C# mit .NET\xa08 entwickelt ist. Der Dienst erm\xf6glicht vollst\xe4ndige Kontrolle \xfcber Nutzeranwendungen (MicroSIP, Skype, Telegram) und realisiert bidirektionale Kommunikation mit dem Client \xfcber WebSocket, implementiert mit der Fleck-Bibliothek. Zu den Funktionen geh\xf6ren UI-Automatisierung externer Anwendungen via FlaUI, Audio-Streaming und -Erfassung mit NAudio: Der Dienst sendet den Ton vom Terminal und empf\xe4ngt Operator-Audio zur Weiterleitung an den Anrufer. Zudem werden Bildschirm- und Mikrofonaufnahmen mit ScreenRecorderLib erstellt und gespeichert. Eine Echtzeit-Spracherkennung mit Vosk transkribiert Nutzerreden und sendet periodisch Textfragmente an den Operator und die Datenbank. Der Service gew\xe4hrleistet stabile Echtzeit-Performance, minimale Latenz und zuverl\xe4ssige Interaktion mit dem Client und bildet die technologische Basis f\xfcr Remote-Kontrolle und Kommunikation."}}}]);